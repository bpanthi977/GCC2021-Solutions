#include <stdio.h>
#include <cstdlib>
#include <numeric>
#include <algorithm>
#include <iostream>

int prime = 1000000000 + 7;

int twoPowerX(long long x){
  if (x == 0)
    return 1;
  else if (x == 1)
    return 2;
  else if (x % 2 == 0) {
    long long a = twoPowerX(x /2);
    return ((long long)(a * a)) % prime;
  } else {
    long long a = twoPowerX(x / 2);
    return ((long long) (a * a * 2)) % prime;
  }
}

int twoPowerNLess2(long long n){
  return (twoPowerX(n) - 2 ) % prime; 
};

/////
bool *inSet;
int *partition;
int *pid;
void init(int n, int* arr, int max){
  inSet = (bool *)calloc(max, sizeof(bool))-1;
  for (int i =0; i< n; i++){
    inSet[arr[i]] = 1;
  }

  partition = (int *)malloc(max * sizeof(int)) - 1 ;
  pid = (int*)calloc(max, sizeof(int)) - 1;
}

bool inSetP(int i) {
  return inSet[i];
}

int pCount =0;
int newPartition(int k) {
  pCount++;
  partition[pCount] = pCount;
  pid[k] = pCount;
  return pCount;
}

void Prime(int i){
  newPartition(i);
}

int findRoot(int id){
  int id2 = partition[id];
  if (id2 == id)
    return id;
  else {
    return partition[id] = findRoot(id2);
  }
}

void Union(int id1, int id2) {
  int r1 = findRoot(id1), r2 = findRoot(id2);
  if (r1 != r2)
    partition[r1] = r2;
}

void Composite(int c, int p) {
  if (pid[p] == 0 && pid[c] == 0)
    newPartition(c);
  if (pid[p] == 0)
    pid[p] = pid[c];
  else if (pid[c] == 0)
    pid[c] = pid[p];
  else
    Union(pid[c], pid[p]);
}

int countRoots() {
  bool* rootP = (bool*)calloc(pCount, sizeof(bool)) - 1;
  for (int i=1; i<=pCount; i++){
    rootP[findRoot(i)] = 1;
  }

  int count =0;
  for (int i=1; i<=pCount; i++){
    if (rootP[i])
      count++;      
  }
  return count;
}

void sieveUpto (int n){
  int *sieve = (int *)calloc((n + 2), sizeof(int));
  sieve[0] = 1; sieve[1] = 1;
  int count = 0;
  for (int i = 2; i <= n; i++) {
    if (!sieve[i]){
      // i is pime
      if (inSetP(i))
	Prime(i);
      for (int j = i*2; j<=n ; j+= i){
	sieve[j] = 1;
	// j is a composite divisible by i
	if (inSetP(j))
	  Composite(j, i);
      }
    }
  }
}

int countStablePartitions(int n, int* arr) {
  int max = 0;
  int one = 0;
  for (int i =0; i< n; i++) {
    if (arr[i] > max) {
      max = arr[i];
    }
    if (arr[i] == 1)
      one = 1;
  }
  init(n, arr, max);
  sieveUpto(max);
  int c = countRoots();
  return twoPowerNLess2(c+one);
}

int main(){
  int arr2[]=
    {174,758,830,14,645,165,854,205,286,386,311,881,227,56,695,133,690,970,523,728,961,468,952,469,308,863,651,419,521,423,383,408,235,15,366,827,315,268,772,94,783,353,199,564,89,959,974,123,65,616,332,837,447,844,942,142,336,557,950,880,604,55,26,546,598,668,498,850,884,483,401,404,789,846,839,168,41,821,818,92,229,895,558,154,905,926,858,905,598,59,367,358,110,405,763,221,595,919,229,861,467,720,204,867,542,72,933,916,990,369,489,56,388,965,371,374,750,149,734,712,463,439,11,978,932,785,665,436,375,859,583,76,979,199,316,952,376,568,241,799,321,109,868,432,406,356,318,856,31,67,64,314,227,207,513,339,632,338,135,646,790,817,914,425,302,333,962,963,684,400,959,831,763,143,149,205,4,340,438,797,706,447,704,677,1000,20,429,796,319,814,362,751,493,956,927,191,468,651,256,843,519,264,260,99,736,1000,831,733,651,699,196,352,976,369,172,270,719,51,151,818,672,321,326,257,958,13,507,858,254,27,759,646,408,409,566,403,275,948,303,291,510,230,792,569,324,439,953,304,616,315,258,845,823,571,682,95,879,319,9,95,233,308,617,160,355,624,322,690,955,412,471,427,354,985,338,370,735,292,474,146,637,891,932,181,398,282,568,969,569,119,551,310,720,602,217,655,898,563,451,155,606,766,867,654,833,568,236,616,659,875,159,813,701,558,521,346,830,993,369,728,957,519,889,864,924,556,409,680,272,39,31,21,492,971,790,541,307,734,567,529,800,931,85,348,335,814,946,87,876,605,480,349,757,711,351,135,491,670,459,762,156,793,861,952,977,18,270,605,565,532,84,99,844,108,112,379,385,565,549,502,693,759,370,591,930,142,543,117,620,730,681,789,646,977,27,319,941,3,893,187,345,86,122,587,899,894,690,215,671,305,115,310,413,196,941,134,827,329,639,851,463,921,981,659,307,96,998,638,996,231,428,717,485,996,606,436,409,172,692,80,681,961,596,164,520,495,58,53,212,708,154,323,405,273,328,138,751,995,793,575,307,22,547,56,460,961,930,523,202,818,23,252,65,460,176,560,880,524,170,58,467,141,880,508,186,807,444,895,209,51,214,430,808,732,296,592,593,703,841,647,828,460,356,788,644,319,731,357,440,31,554,876,971,305,354,305,826,451,773,348,42,407,848,771,999,753,148,85,957,399,755,714,607,761,896,252,98,789,63,233,891,835,709,549,249,35,744,168,103,49,936,870,418,834,263,977,897,389,319,273,491,32,368,492,774,710,983,639,841,529,187,662,532,467,899,299,71,461,316,104,206,879,563,372,765,331,415,152,235,65,176,816,671,599,128,301,527,2,940,947,924,164,99,456,751,333,115,286,374,339,100,58,356,563,924,43,288,516,775,539,157,991,558,440,584,940,924,686,625,261,502,544,440,106,600,611,521,897,177,553,825,342,739,656,330,25,345,487,354,251,714,394,667,600,880,1000,619,605,613,417,802,477,377,924,258,587,906,671,207,326,287,408,393,678,359,41,718,145,768,56,91,864,862,532,113,361,582,251,736,806,12,567,649,947,926,359,517,441,199,975,37,635,15,477,354,683,559,581,479,102,237,184,499,794,112,63,256,655,895,664,437,685,895,414,154,971,341,567,544,473,986,892,131,308,63,789,90,158,180,150,133,402,820,646,350,408,358,527,220,59,784,437,168,271,166,295,897,994,769,920,873,577,750,628,531,219,971,794,337,295,152,541,831,99,694,317,323,516,178,76,442,91,205,515,459,511,493,550,338,251,115,996,200,565,740,583,257,96,889,910,58,826,561,837,310,158,744,902,752,437,639,613,654,517,514,323,205,960,485,920,779,992,407,812,598,680,38,418,836,468,731,910,420,189,343,899,485,608,53,484,164,862,469,498,143,751,263,591,654,103,852,63,95,3,723,106,985,519,150,205,120,283,33,695,74,601,830,638,633,654,902,496,481,103,821,272,335,52,737,867,345,861,56,819,122,838,742,717,847,296,280,582,76,802,575,590,90,774,937,884,555,211,129,615,476,954,887,513,627,746,648,346,746,830,721,124,257,682,59,953,201,651,751,741,885,333,588,744,700,527,399,455,39,88,316,714,796,486,556,654,304,63,426,707,437,803,810,562,282,931,52,708,530,191,33,825,134,292,251,304,484,162,113,866,433,417,482,992,689,106,427,701,758,686,717,501,948,842,466,588,338,338,258,140,201,867,765,805,567,231,746,876,936,431,222,727,1000,313,982,812};
  // int arr2[] = {4,8,17,26,13};
  int n = sizeof(arr2) / sizeof(int);
  
  int c = countStablePartitions(n, arr2);
  if (c==0) {
    printf("NO\n0");
  } else {
    printf("YES\n%d", c);
  }
  return 0;
  
}
